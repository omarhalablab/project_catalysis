// <auto-generated />
using System;
using Catalysis.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Catalysis.Migrations
{
    [DbContext(typeof(Catalysis_dbContext))]
    partial class Catalysis_dbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Catalysis.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Catalysis.Models.ChapterVideo", b =>
                {
                    b.Property<int>("ChapterVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("CanComment")
                        .HasColumnType("bit");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("ChapterVideoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfDislike")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfLikes")
                        .HasColumnType("int");

                    b.Property<int?>("Ordering")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChapterVideoId");

                    b.HasIndex("ChapterId");

                    b.ToTable("ChapterVideos");
                });

            modelBuilder.Entity("Catalysis.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByNavigationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByNavigationUserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Catalysis.Models.CourseChapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChapterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DurationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Ordering")
                        .HasColumnType("int");

                    b.HasKey("ChapterId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseChapters");
                });

            modelBuilder.Entity("Catalysis.Models.CourseImage", b =>
                {
                    b.Property<int>("CourseImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseImageId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseImages");
                });

            modelBuilder.Entity("Catalysis.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Catalysis.Models.UserChapterVideo", b =>
                {
                    b.Property<int>("UserChapterVideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsFullyWatched")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastTimeWatched")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("UserChapterVideoId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("UserChapterVideos");
                });

            modelBuilder.Entity("Catalysis.Models.UserCourse", b =>
                {
                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChapterVideoId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("DurationStopped")
                        .HasColumnType("time");

                    b.Property<DateTime?>("JoiningTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSee")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserCourseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("ChapterVideoId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("Catalysis.Models.VideoComments", b =>
                {
                    b.Property<int>("VideoCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<int>("ChapterVideoId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommentedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VideoCommentId");

                    b.HasIndex("ChapterVideoId");

                    b.ToTable("VideoComments");
                });

            modelBuilder.Entity("Catalysis.Models.ChapterVideo", b =>
                {
                    b.HasOne("Catalysis.Models.CourseChapter", "Chapter")
                        .WithMany("ChapterVideos")
                        .HasForeignKey("ChapterId");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Catalysis.Models.Course", b =>
                {
                    b.HasOne("Catalysis.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Catalysis.Models.User", "CreatedByNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("CreatedByNavigationUserId");

                    b.Navigation("Category");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("Catalysis.Models.CourseChapter", b =>
                {
                    b.HasOne("Catalysis.Models.Course", "Course")
                        .WithMany("CourseChapters")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Catalysis.Models.CourseImage", b =>
                {
                    b.HasOne("Catalysis.Models.Course", "Course")
                        .WithMany("CourseImages")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Catalysis.Models.UserChapterVideo", b =>
                {
                    b.HasOne("Catalysis.Models.User", "User")
                        .WithMany("UserChapterVideos")
                        .HasForeignKey("UserId");

                    b.HasOne("Catalysis.Models.ChapterVideo", "Video")
                        .WithMany("UserChapterVideos")
                        .HasForeignKey("VideoId");

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Catalysis.Models.UserCourse", b =>
                {
                    b.HasOne("Catalysis.Models.ChapterVideo", "ChapterVideo")
                        .WithMany("UserCourses")
                        .HasForeignKey("ChapterVideoId");

                    b.HasOne("Catalysis.Models.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId");

                    b.HasOne("Catalysis.Models.User", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChapterVideo");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Catalysis.Models.VideoComments", b =>
                {
                    b.HasOne("Catalysis.Models.ChapterVideo", "ChapterVideo")
                        .WithMany("VideoComments")
                        .HasForeignKey("ChapterVideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChapterVideo");
                });

            modelBuilder.Entity("Catalysis.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Catalysis.Models.ChapterVideo", b =>
                {
                    b.Navigation("UserChapterVideos");

                    b.Navigation("UserCourses");

                    b.Navigation("VideoComments");
                });

            modelBuilder.Entity("Catalysis.Models.Course", b =>
                {
                    b.Navigation("CourseChapters");

                    b.Navigation("CourseImages");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("Catalysis.Models.CourseChapter", b =>
                {
                    b.Navigation("ChapterVideos");
                });

            modelBuilder.Entity("Catalysis.Models.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("UserChapterVideos");

                    b.Navigation("UserCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
